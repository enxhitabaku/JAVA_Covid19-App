/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package covid.pkg19application;

import static covid.pkg19application.PatientReport.readHistory;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *This class is a notice board form 
 * @author Enxhi Tabaku
 */
public class NoticeBoard extends javax.swing.JFrame {
   
    //Get the logged in User Id based on his email add and use it multiple times

    /**
     *
     */
    protected static final HashMap<String,String>MAPID=(HashMap<String,String>) UserClass.storeDBemailAndID();
    protected static  String id=MAPID.get( LogIn.email );
    protected static final HashMap<String,String>MAPZIP=(HashMap<String,String>) UserClass.storeDBidAndZIP();
    protected static String zip=MAPZIP.get(id);
     
    protected static  int countIncrement = 0; //count how many times the Cases are incremented
    /**
     *
     */
   
    
    //Call static arrayList to use it in multiple methods

    /**
     *
     */
    protected static ArrayList<String>infectedAreas;
    
    /**
     * Creates new form NoticeBoard
     */ 
    public NoticeBoard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelTotalInfected = new javax.swing.JLabel();
        jLabelAreaInfected = new javax.swing.JLabel();
        jLabelPotentialInfected = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabelCityName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Covid-19 App");
        setMinimumSize(new java.awt.Dimension(819, 227));
        setResizable(false);

        jPanel1.setMinimumSize(new java.awt.Dimension(819, 227));
        jPanel1.setLayout(null);

        jLabelTotalInfected.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabelTotalInfected.setForeground(new java.awt.Color(0, 0, 0));
        String text=writeTotal();
        jLabelTotalInfected.setText(text);
        jLabelTotalInfected.setToolTipText("");
        jPanel1.add(jLabelTotalInfected);
        jLabelTotalInfected.setBounds(60, 90, 160, 50);

        jLabelAreaInfected.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabelAreaInfected.setForeground(new java.awt.Color(0, 0, 0));
        String textArea;
        if(writeAreaNo()==null)
        textArea="0";
        else
        textArea=writeAreaNo();
        jLabelAreaInfected.setText(textArea);
        jPanel1.add(jLabelAreaInfected);
        jLabelAreaInfected.setBounds(320, 80, 160, 60);

        jLabelPotentialInfected.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabelPotentialInfected.setForeground(new java.awt.Color(0, 0, 0));
        String textPotentialNo=writePotentialNo();
        jLabelPotentialInfected.setText(textPotentialNo);
        jPanel1.add(jLabelPotentialInfected);
        jLabelPotentialInfected.setBounds(580, 80, 251, 60);

        jButton1.setBackground(new java.awt.Color(51, 153, 255));
        jButton1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Back");
        jButton1.setToolTipText("");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(737, 10, 70, 30);

        jLabelCityName.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabelCityName.setForeground(new java.awt.Color(153, 0, 0));
        String textPotentialCity=writePotentialAreaName();
        jLabelCityName.setText(textPotentialCity);
        jPanel1.add(jLabelCityName);
        jLabelCityName.setBounds(600, 150, 160, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\user\\Desktop\\CovidMENU\\Notice_Board.png")); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 820, 230);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        AddSymp.submitClicked=false;//reset value
        
        MainMenu menu=new MainMenu();
        
        menu.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
  
     /**
     * This method will calculate the average risk for every user
     * @return the average risk to be passed as a paramether for the NoticeBoardClass constructor
     */
    protected static String calculateAvgForNoticeBoard(){
        ArrayList<SymptomsClass>list=readHistory("C:\\Users\\user\\Desktop\\Users_Report.txt");//Read from history file
        ArrayList<Integer>resultList=new ArrayList<>();//temp array to store results
        
        Integer sum=0;
        Integer average=0;
        
        //loop through the arrayList returned from reading the file
        for(int i=0;i<list.size();i++){
            if( id.equals( list.get(i).getID()) ){ //get all the risk result of the user and store to the result arrayList
                Integer result=Integer.valueOf( list.get(i).getRESULT() );
                resultList.add(result);
            }//End of If
        }//End of For
        
        //Compute average
        if( !resultList.isEmpty() )
        {
            for(int i=0;i<resultList.size();i++)
                sum+=resultList.get(i);
            
            average=sum/list.size();
        }

        return String.valueOf(average);
    }

    /**
     * This Method will read from the noticeBoard file
     * @param pathName the path of the file to be accessed
     * @return arrayList value of the reaten notice file
     */
    /*
    protected static ArrayList<NoticeBoardClass> readNotice(String pathName){
        //method to read the File if the path is passed as paramether 
        ArrayList<NoticeBoardClass> fileNotice = new ArrayList<>();
        
        try{
            File file=new File(pathName);
            try (Scanner read = new Scanner(file)) {
                while(read.hasNextLine()){
                    String data = read.nextLine();  //Read the next line of the file and store it to the variable
                    NoticeBoardClass notice = new NoticeBoardClass(data);  //call the sring parametherized constructor
                    
                    fileNotice.add(notice);   //store the symptoms to the list
                    
                }//End of while
            }   
        }catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null,"Creating File...","Error : File Not Found",JOptionPane.ERROR_MESSAGE); //File not Found    
            e.printStackTrace();
        }
        catch(IndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(null,"An error occurred.","ERROR INDEX OUT OF BOUNDURY",JOptionPane.ERROR_MESSAGE);   
            e.printStackTrace();
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(null,"No Values Available.","ERROR",JOptionPane.ERROR_MESSAGE); //File not Found   
            e.printStackTrace();
        }

        return fileNotice;//return a List of the items in the file witch match the user id.
    }
    */
    
    /**
     * This Method will store to the file id,zip and avg of the users
     * @param pathName the path of the file to be accessed 
     * @return arrayList value of the string value added to the notice file
     */
    /*
     protected static ArrayList<String> addNotice(String pathName) {
         
        ArrayList<String>fileNotice = new ArrayList<>();
        
        PrintWriter writer=null;
        try{
            FileWriter file=new FileWriter(pathName,true);
            writer=new PrintWriter(file);
            
            HashMap<String,String>myZipMap=(HashMap<String,String>) UserClass.storeDBidAndZIP();
            String zip=myZipMap.get(id);// get the zip based on the id .
            
            String average=calculateAvgForNoticeBoard();//get the returned value from the custome method
            
            //Call Parametharized Constructor
            NoticeBoardClass notice=new NoticeBoardClass(id, zip, average);
            
            //Add the String rapresentation of the string into the arrayList.
            fileNotice.add(notice.toString());
            
            //Add to the file line by line
            for(int i=0;i<fileNotice.size();i++){
                writer.println(fileNotice.get(i));
            }
            
            writer.close();  
            
        }catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null,"An error occurred.","ERROR FILE NOT FOUND",JOptionPane.ERROR_MESSAGE); //File not Found    
        }
        catch(IndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(null,"An error occurred.","ERROR INDEX OUT OF BOUNDURY",JOptionPane.ERROR_MESSAGE); //Index out of boundary   
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"...","ERROR",JOptionPane.ERROR_MESSAGE);
        }
        

        return fileNotice;//return an ArrayList of the items in the file  
    }
    */
          
    /**
      * This Method will update the desired value on the text
      * @param noticeList the arrayList of the elements in the file
      * @param update the value to be updated
      * @return the final updated array list
      */
    /*
    protected static ArrayList<NoticeBoardClass> updateNotice(ArrayList<NoticeBoardClass>noticeList, String update){       
        
         for(int i=0;i<noticeList.size();i++){
             
             if(id.equals ( noticeList.get(i).getID() ) )
             {
                if( !( noticeList.get(i).getAvg().equals(update)) ) //Overwrite Only The Logged In User Data
                {
                    NoticeBoardClass notice = new NoticeBoardClass(
                                       noticeList.get(i).getID()+" "
                                               .concat(noticeList.get(i).getZip()+" ")
                                               .concat(update) 
                                              );// the new line of text (Updated) 

                   noticeList.remove(i); //Remove the old line of text from the file

                   noticeList.add(i,notice);//Add the element to the list

                   addUpdatedNotice(noticeList, "C:\\Users\\user\\Desktop\\Notice_Board.txt");// add to file

                }//end of nested if 
                
                //if the user has not submitted any symptom it wont write any data to file, otherwise it will  
             }else{ 
                 if(AddSymp.submitClicked==true){  addNotice("C:\\Users\\user\\Desktop\\Notice_Board.txt"); }

             }
         }//end of For
         
         return noticeList;
     }
    */
    
    /**
     * This method will rewrite the list to the file instead of the older one . 
     * @param objList the list with the elements to be stored into the file
     * @param pathName  the path of the file to be accessed 
     */
    /*
    protected static void addUpdatedNotice(ArrayList<NoticeBoardClass>objList, String pathName){
        //BUGS EVERYWHERE 
        try{
            BufferedWriter writer=new BufferedWriter( new FileWriter(pathName) );
            
            //Add to the file line by line
            for(int i=0;i<objList.size();i++){
                writer.write(objList.get(i).toString());
                writer.newLine();
            }
            
            writer.close();   
            
        }catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null,"An error occurred.","ERROR FILE NOT FOUND",JOptionPane.ERROR_MESSAGE); //File not Found    
            e.printStackTrace();
        }
        catch(IndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(null,"An error occurred.","ERROR INDEX OUT OF BOUNDURY",JOptionPane.ERROR_MESSAGE); //Index out of boundary   
            e.printStackTrace();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"An error occurred.","ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }    
    */
    
     /**
      * This Method will open the file and check if it's empty or not, in base of that a decision will  be made
      * @param pathName the path of the file to open
      */
    /*
     protected static void openFileAndTakeActions(String pathName){
         
        File file=new File(pathName);
         
        Scanner output;
        try {
            if(file.exists() ){ //check the existence of the file
                output = new Scanner(file);
                
                if(file.length()==0) { //if file is empty
                 
                    addNotice(pathName);
                 
                    infectedAreas= NoticeBoardClass.infectedAreas( readNotice("C:\\Users\\user\\Desktop\\Notice_Board.txt") );
                    
                 }else {
                    
                 ArrayList<NoticeBoardClass>noticeList=readNotice(pathName);//read from file
                 updateNotice(noticeList, calculateAvgForNoticeBoard() );//costum method call

                                     
                 infectedAreas= NoticeBoardClass.infectedAreas( readNotice("C:\\Users\\user\\Desktop\\Notice_Board.txt") ); 
                 
                }//Nested Else
            }else{
                addNotice(pathName);
                infectedAreas= NoticeBoardClass.infectedAreas( readNotice("C:\\Users\\user\\Desktop\\Notice_Board.txt") );
            }    
        }catch(FileNotFoundException e){
            JOptionPane.showMessageDialog(null,"Creating the file...","ERROR FILE NOT FOUND",JOptionPane.ERROR_MESSAGE); //File not Found    
            e.printStackTrace();
        }
     }
    */
     protected static void NoticeToDB(){
         System.out.println("--------- \n NOTICE TO DB SECTION \n ZIP: "+zip+"\n--------------");
         int average=Integer.parseInt(calculateAvgForNoticeBoard());

         
         try{
             Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/javaproject?zeroDateTimeBehavior=convertToNull","root","");
             
             if(average>75 & countIncrement==0){
                 try (PreparedStatement state = con.prepareStatement("INSERT INTO noticeboard (Zip,Cases) VALUES (?,Cases)\n"
                                                                            +   "ON Duplicate KEY UPDATE Cases=Cases+1")) {
                     countIncrement++;
                     
                     System.out.println("Count "+countIncrement);
                     state.setString(1, zip); 
                     state.execute();
                 }
             }//End of IF
             else if(average<75 & countIncrement!=0){
                 PreparedStatement state2 = con.prepareStatement("INSERT INTO noticeboard (Zip,Cases) VALUES (?,Cases)\n"
                                                                            +   "ON Duplicate KEY UPDATE Cases=Cases-1 ");
                 countIncrement--;
                 
                 state2.setString(1,zip);
                 state2.execute();
             }
             else if(average<75 && countIncrement==0){
                 PreparedStatement state3 = con.prepareStatement("INSERT INTO noticeboard (Zip,Cases) VALUES (?,Cases)\n"
                                                                            +   "ON Duplicate KEY UPDATE Cases=Cases ");
                 state3.setString(1,zip);
                 state3.execute();
             }

             
         } catch (SQLException ex) {
            Logger.getLogger(NoticeBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
         
     }
   
     
     /**
      * This method will attach the text to jLabelTotalInfected
      * @return String
      */
     protected static String writeTotal(){
       return String.valueOf(MainMenu.sum);//NoticeBoardClass.TottalNo(infectedAreas);
     }
     
    /**
     *
     * @return write to jLabel Area No
     */
    protected static String writeAreaNo(){
         return String.valueOf(MainMenu.areaNoCases);//NoticeBoardClass.AreaInfectedNo(infectedAreas);
     }
     
     /**
      * This method will write to jlabel the number of infected users in the potential infected City
      * @return String
      */
     protected static String writePotentialNo(){
         //String key=NoticeBoardClass.PotentialInfectedCity(infectedAreas);
         
         return String.valueOf(MainMenu.potentialCases);//NoticeBoardClass.PotentialInfectedNo(infectedAreas,key);
     }
     
    /**
      * This method will have a switch statement to check which Country should  attach the text to jLabelAreaInfected
      * @return String
      */
    protected static String writePotentialAreaName(){
 
        //String key=NoticeBoardClass.PotentialInfectedCity(infectedAreas);
        String key=MainMenu.potentialZip;
        switch(key){
            case "1000": return "Tirana";
            case "1500": return "Kruje";
            case "2000": return "Durres";
            case "2500": return "Kavaje";
            case "3000": return "Elbasan";
            case "3300": return "Gramsh";
            case "3400": return "Librazhd";
            case "3500": return "Peqin";
            case "4000": return "Shkoder";
            case "4300": return "Malesi e Madhe";
            case "4400": return "Puke";
            case "4500": return "Lezhe";
            case "4600": return "Mirdite";
            case "4700": return "Kurbin";
            case "5000": return "Berat";
            case "5300": return "Kucove";
            case "5400": return "Skrapar";
            case "6000": return "Gjirokaster";
            case "6300": return "Teplene";
            case "6400": return "Permet";
            case "7000": return "Korce";
            case "7300": return "Pogradec";
            case "7400": return "Kolonje";
            case "8000": return "Mat";
            case "8300": return "Diber";
            case "8400": return "Bulqize";
            case "8500": return "Kukes";
            case "8600": return "Has";
            case "8700": return "Tropoje";
            case "9000": return "Lushnje";
            case "9300": return "Fier";
            case "9400": return "Sarande";
            
            default : 
                return " "+key;    
        }//End of Switch
     }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoticeBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoticeBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoticeBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoticeBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NoticeBoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAreaInfected;
    private javax.swing.JLabel jLabelCityName;
    private javax.swing.JLabel jLabelPotentialInfected;
    private javax.swing.JLabel jLabelTotalInfected;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
