/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package covid.pkg19application;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * This class will display the sign up form and validate sign up 
 * @author Enxhi Tabaku
 */
public class SignUp extends javax.swing.JFrame {
    
    protected static String staticID=UserClass.generateId();
    /**
     * Creates new form SignUp
     */

    public SignUp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldSurname = new javax.swing.JTextField();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldEmail = new javax.swing.JTextField();
        jTextFieldZIPCode = new javax.swing.JTextField();
        jButtonRegister = new javax.swing.JButton();
        jPasswordFieldSignUp = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Covid-19 App");
        setMinimumSize(new java.awt.Dimension(384, 490));
        setResizable(false);

        jPanel1.setMinimumSize(new java.awt.Dimension(384, 490));
        jPanel1.setLayout(null);

        jTextFieldSurname.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextFieldSurname.setBorder(null);
        jTextFieldSurname.setOpaque(false);
        jPanel1.add(jTextFieldSurname);
        jTextFieldSurname.setBounds(40, 120, 290, 30);

        jTextFieldName.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextFieldName.setBorder(null);
        jTextFieldName.setOpaque(false);
        jPanel1.add(jTextFieldName);
        jTextFieldName.setBounds(40, 70, 290, 30);

        jTextFieldEmail.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextFieldEmail.setToolTipText("Your Email Address");
        jTextFieldEmail.setBorder(null);
        jTextFieldEmail.setOpaque(false);
        jPanel1.add(jTextFieldEmail);
        jTextFieldEmail.setBounds(40, 170, 290, 30);

        jTextFieldZIPCode.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextFieldZIPCode.setToolTipText("District ZIP Code");
        jTextFieldZIPCode.setBorder(null);
        jTextFieldZIPCode.setOpaque(false);
        jPanel1.add(jTextFieldZIPCode);
        jTextFieldZIPCode.setBounds(40, 220, 290, 30);

        jButtonRegister.setToolTipText("Sign Up");
        jButtonRegister.setBorder(null);
        jButtonRegister.setContentAreaFilled(false);
        jButtonRegister.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRegister);
        jButtonRegister.setBounds(130, 360, 140, 40);

        jPasswordFieldSignUp.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jPasswordFieldSignUp.setForeground(new java.awt.Color(0, 0, 0));
        jPasswordFieldSignUp.setToolTipText("Password");
        jPasswordFieldSignUp.setBorder(null);
        jPasswordFieldSignUp.setOpaque(false);
        jPasswordFieldSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordFieldSignUpActionPerformed(evt);
            }
        });
        jPanel1.add(jPasswordFieldSignUp);
        jPasswordFieldSignUp.setBounds(40, 272, 290, 30);

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\user\\Desktop\\CovidMENU\\Sign_Up.png")); // NOI18N
        jPanel1.add(jLabel2);
        jLabel2.setBounds(0, 0, 390, 490);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPasswordFieldSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordFieldSignUpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordFieldSignUpActionPerformed

    private void jButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterActionPerformed
        if(!verifySignUp()) {
            JOptionPane.showMessageDialog(null,"REQUIRED Valid Input In All The Fields\n"
                    +"No White Spaces Allowed\n"
                    +"First Letter Must Be Capital\n"
                    +"Only District Albanian Zip Code Allowed\n"
                    +"Password must be at least 8digits long \n"
                    + "Password must have at least 1 Upper and Lower Case Letter  \n"
                    + "Password must have at least 1 Special Charcater\n"
                    + "Password must have at least 1 No"
                    ,"ERROR", JOptionPane.ERROR_MESSAGE);
            if(!verifyEmail(jTextFieldEmail.getText()))
                System.out.println("Error Email");
            if(!verifyPassword(String.valueOf(jPasswordFieldSignUp.getPassword())))
                System.out.println("Error Pass");
        }
        /*else if(checkDuplicatedEmails("C:\\Users\\user\\Desktop\\Covid19Users.txt")==false )
        {
            JOptionPane.showMessageDialog(null, "Email Already Exist", "Error", JOptionPane.ERROR_MESSAGE);
        } */
        else{
            addUserToDb();
            
            //addUser("C:\\Users\\user\\Desktop\\Covid19Users.txt"); 
            JOptionPane.showMessageDialog(null, "Signed Up Succesfully",
                     "Covid-19 App", JOptionPane.INFORMATION_MESSAGE);
           
            LogIn menu=new LogIn();
            
            menu.setVisible(true);
            menu.setLocationRelativeTo(null);
            this.setVisible(false);
            this.dispose();
            
        }      
    }//GEN-LAST:event_jButtonRegisterActionPerformed
    
    /**
     *This Method Will Allow only words with the First uppercase letters and without any special character
     * @param name the input text from user
     * @return boolean value  
     */
    protected static boolean verifyNameSurname(String name){ 
        return name.matches("[A-Z][a-z]+"); 
    }

    /**
     *This Method Will Allow Only Real Albanian Districts ZIP codes 
     * @param zip the input text from user
     * @return boolean value 
     */
    protected static boolean verifyZip(String zip){
        return zip.matches("(([1-9]0)|([3-9][3,4])|([1-4]5)|(97)|(85))00");
    }

    /**
     *This Method Will Allow Only only valid email add
     * 1) A-Z characters allowed
     * 2) a-z characters allowed
     * 3) 0-9 numbers allowed
     * 4) Additionally email may contain only dot(.), dash(-) and underscore(_)
     * 5) Rest all characters are not allowed
     * @param email the input text from user
     * @return boolean value 
     */
    protected static boolean verifyEmail(String email){ 
        return email.matches("^[A-Za-z0-9+_.-]+@(.+)$");
    }
    
    /**
     * This method will evaluate the password strength
     * @param password the input of the password field
     * @return boolean value
     */
    protected static boolean verifyPassword(String password){
        return password.matches("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$");
    }
    
    /** 
     *This Method will verify the Sign Up 
     * @return boolean value 
     */
    protected static boolean verifySignUp(){ //ALL the methods must return true in order to Sign Up
        
        return verifyNameSurname(jTextFieldName.getText())
                && verifyNameSurname(jTextFieldSurname.getText())
                && verifyEmail(jTextFieldEmail.getText())
                && verifyZip(jTextFieldZIPCode.getText())
                && verifyPassword( String.valueOf(jPasswordFieldSignUp.getPassword() ) );
    }
      
      
    /**
     * This method will check if the email has already been recorded to file
     * @param pathName the file to open
     * @return  boolean
     */
    /*
    protected static boolean checkDuplicatedEmails(String pathName) {
        
        boolean validEmail=true;
   
        File file=new File(pathName);
         
        Scanner output;
        try {
            if(file.exists() & file.length()!=0 ){ //check the existence of the file
                
                output = new Scanner(file); 
                
                    ArrayList<UserClass>userList=LogIn.readUsers(pathName);
                    
                    for(int i=0;i<userList.size();i++){
                        
                        String email=jTextFieldEmail.getText().toLowerCase();
                        
                        if(email.equals(userList.get(i).getEmail() ) )//If email typed by user = with any email in the file, boolean false
                        {
                            validEmail=false;
                        } 
                        
                    }//End of For
                }//End of Nested If   
        }catch(FileNotFoundException e){
           JOptionPane.showMessageDialog(null,"File Not Found","Error",JOptionPane.ERROR_MESSAGE);
        }
        return validEmail;
    }
    */
    
    /**
     *This method will create, open, close  and write the users to file
     * @param pathName the path of the respective file
     * @return ArrayList
     */
    /*
    protected static ArrayList<String> addUser(String pathName) {
 
        ArrayList<String>fileUsers = new ArrayList<>();
        
        PrintWriter writer=null;
        try{
            FileWriter file=new FileWriter(pathName,true);
            writer=new PrintWriter(file);

            //Call Parametharized Constructor
            UserClass user=new UserClass(
                    staticID,
                    jTextFieldName.getText(), 
                    jTextFieldSurname.getText(), 
                    jTextFieldEmail.getText(), 
                    jTextFieldZIPCode.getText(),
                    String.valueOf( jPasswordFieldSignUp.getPassword() )  );
            
            fileUsers.add(user.toString());
            
            //Add to the file line by line
            for(int i=0;i<fileUsers.size();i++){
                writer.println(fileUsers.get(i));
            }
            
            writer.close();  
            
        }catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null,"Creating file...","ERROR FILE NOT FOUND",JOptionPane.ERROR_MESSAGE); //File not Found    
        }
        catch(IndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(null,"An error occurred.","ERROR INDEX OUT OF BOUNDURY",JOptionPane.ERROR_MESSAGE); //Index out of boundary   
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"...","ERROR",JOptionPane.ERROR_MESSAGE);
        }
        

        return fileUsers;//return an ArrayList of the items in the file  
    }
     */
    static void addUserToDb(){
        
        String id=staticID;
        String name=jTextFieldName.getText();
        String surname=jTextFieldSurname.getText();
        String email=jTextFieldEmail.getText();
        String zip=jTextFieldZIPCode.getText();
        String password=String.valueOf( jPasswordFieldSignUp.getPassword() );
       
        try {
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/javaproject?zeroDateTimeBehavior=convertToNull","root","");
            PreparedStatement state=con.prepareStatement("INSERT INTO USERS VALUES(?,?,?,?,?,?)");
           
            state.setString(1, id);
            state.setString(2, name);
            state.setString(3, surname);
            state.setString(4, email);
            state.setString(5, password);
            state.setString(6, zip);
            
            state.execute();
            System.out.println("Insertion Completed");//Debug 
            state.close();  
            } catch (SQLException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SignUp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected static javax.swing.JButton jButtonRegister;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    protected static javax.swing.JPasswordField jPasswordFieldSignUp;
    protected static javax.swing.JTextField jTextFieldEmail;
    protected static javax.swing.JTextField jTextFieldName;
    protected static javax.swing.JTextField jTextFieldSurname;
    protected static javax.swing.JTextField jTextFieldZIPCode;
    // End of variables declaration//GEN-END:variables
}
